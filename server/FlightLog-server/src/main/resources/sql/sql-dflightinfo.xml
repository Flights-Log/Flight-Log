<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitc.fullstack503.flightlog.flightlogserver.mapper.FlightInfoSaveMapper">

  <insert id="insertDFlightInfo" parameterType="java.util.List">
    INSERT INTO flight_info (
    flight_info_airline, flight_info_airlineNum, flight_info_startDate,
    flight_info_Eddate, flight_info_startTime, flight_info_arrivalTime,
    flight_info_startCity, flight_info_arrivalCity,
    flight_mon, flight_tue, flight_wed,
    flight_thu, flight_fri, flight_sat, flight_sun
    ) VALUES
    <foreach collection="flightInfoList" item="flight" separator=",">
      (
      <!--CONCAT(#{flight.domesticNum},
      REPLACE(LEFT(#{flight.domesticStdate}, 10), '-', ''),
      REPLACE(LEFT(#{flight.domesticEddate}, 10), '-', ''), #{flight.domesticStartTime}),
      항공사명, 비행기번호, 운항시작일, 종료일, 출발시간, 도착시간, 출발지역, 도착지역, 월~일
      -->
      #{flight.airlineKorean}, #{flight.domesticNum}, #{flight.domesticStdate},
      #{flight.domesticEddate}, #{flight.domesticStartTime}, #{flight.domesticArrivalTime},
      #{flight.startcity}, #{flight.arrivalcity}, #{flight.domesticMon},
      #{flight.domesticTue}, #{flight.domesticWed}, #{flight.domesticThu},
      #{flight.domesticFri}, #{flight.domesticSat}, #{flight.domesticSun}
      )
    </foreach>
  </insert>

  <insert id="insertIFlightInfo" parameterType="java.util.List">
    INSERT INTO flight_info ( <!--flight_id-->
    flight_info_airline, flight_info_airlineNum, flight_info_startDate,
    flight_info_Eddate, flight_info_startTime,
    flight_info_startCity, flight_info_arrivalCity,
    flight_mon, flight_tue, flight_wed,
    flight_thu, flight_fri, flight_sat, flight_sun
    ) VALUES
    <foreach collection="iflightDTOList" item="flight" separator=",">
      (
      #{flight.airlineKorean}, #{flight.internationalNum}, #{flight.internationalStdate},
      #{flight.internationalEddate}, #{flight.internationalTime},
      #{flight.deptcity}, #{flight.arrvcity}, #{flight.internationalMon},
      #{flight.internationalTue}, #{flight.internationalWed}, #{flight.internationalThu},
      #{flight.internationalFri}, #{flight.internationalSat}, #{flight.internationalSun}
      )
    </foreach>
  </insert>

  <!--  출발지 설정하기-->
  <select id="searchDeparture" resultType="string">
    select flight_info_startCity
    from flight_info
    group by flight_info_startCity
    order by flight_info_startCity;
  </select>

  <!--  도착지 설정하기-->
  <!--  단, 출발지로 설정한 값은 제외한다-->
  <!--  또한, 해당하는 출발지에서 도착지로 가는 항공편이 있는 경우에만 출력한다-->
  <select id="searchArrive" resultType="string">
    select flight_info_arrivalCity
    from flight_info
    where flight_info_startCity = #{selectedDeparture}
    and flight_info_arrivalCity not like #{selectedDeparture}
    group by flight_info_arrivalCity, flight_info_startCity
    order by flight_info_arrivalCity;
  </select>

  <!--  지금까지 설정한 값을 바탕으로 출발하는 비행기 값 가져오기-->
  <!--  단, 2024년 값을 기준으로 한다-->
  <select id="searchGoAirplane" parameterType="java.util.List">
    select flight_info_airline, flight_info_startTime, flight_info_arrivalTime
    from flight_info
    where flight_info_startCity = #{startCity}
    and flight_info_arrivalCity = #{arrivalCity}
    and date_sub(#{goDate}, interval 1 year) between flight_info_startDate and flight_info_Eddate
    and case weekday(date_sub(#{goDate}, interval 1 year))
    when 0 then flight_mon
    when 1 then flight_tue
    when 2 then flight_wed
    when 3 then flight_thu
    when 4 then flight_fri
    when 5 then flight_sat
    when 6 then flight_sun
    end = 'Y';
  </select>
</mapper>